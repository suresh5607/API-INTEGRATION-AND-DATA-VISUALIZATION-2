import tkinter as tk
from tkinter import ttk
import time
import threading

class ErrorDetectionSimulation:
    def __init__(self, root):
        self.root = root
        self.root.title("Error Detection Techniques Simulation")
        self.root.geometry("1000x900")

        # UI Components
        self.technique_label = tk.Label(root, text="Select Error Detection Technique:")
        self.technique_label.pack()

        self.technique_combo = ttk.Combobox(root, values=["Parity Check", "Checksum", "CRC", "Hamming Code"])
        self.technique_combo.pack()
        self.technique_combo.bind("<<ComboboxSelected>>", self.update_input_fields)

        self.input_label = tk.Label(root, text="Enter Data:")
        self.input_label.pack()

        self.input_entry = tk.Entry(root, width=30)
        self.input_entry.pack()

        # Additional input field (for divisor, etc.)
        self.additional_label = tk.Label(root, text="")
        self.additional_label.pack()
        self.additional_entry = tk.Entry(root, width=30)
        self.additional_entry.pack()
        self.additional_label.pack_forget()
        self.additional_entry.pack_forget()

        self.start_button = tk.Button(root, text="Start Simulation", command=self.start_simulation)
        self.start_button.pack()

        self.output_text = tk.Text(root, height=10, width=80, state='disabled')
        self.output_text.pack()

        # Data Frame for displaying bits
        self.data_frame = tk.Frame(root)
        self.data_frame.pack()

        # Corrected Data Frame for displaying corrected bits
        self.corrected_frame = tk.Frame(root)
        self.corrected_frame.pack()

        # Simulation Panel
        self.simulation_canvas = tk.Canvas(root, width=800, height=300, bg="white")
        self.simulation_canvas.pack()

        # Animation variables
        self.packet_x = 50
        self.host1_x, self.host2_x = 50, 750
        self.host_y = 150
        self.running = False
        self.source_node = None
        self.destination_node = None
        self.path_animation = None

    def log_output(self, message):
        self.output_text.config(state='normal')
        self.output_text.insert(tk.END, message + "\n")
        self.output_text.see(tk.END)
        self.output_text.config(state='disabled')

    def update_table(self, data, frame, highlight_index=None):
        """Create a grid to represent the data bits."""
        for widget in frame.winfo_children():
            widget.destroy()

        for i, bit in enumerate(data):
            border_color = "red" if i == highlight_index else "black"
            cell = tk.Label(frame, text=bit, borderwidth=2, relief="solid", width=4, height=2, fg="black")
            cell.grid(row=0, column=i, padx=2, pady=2)
            if i == highlight_index:
                cell.config(highlightbackground=border_color, highlightthickness=2)

    def update_input_fields(self, event=None):
        """Update the additional input fields based on the selected technique."""
        technique = self.technique_combo.get()

        if technique == "CRC":
            self.additional_label.config(text="Enter Divisor:")
            self.additional_label.pack()
            self.additional_entry.pack()
        else:
            self.additional_label.pack_forget()
            self.additional_entry.pack_forget()

    def simulate_animation(self, label):
        self.running = True
        self.packet_x = self.host1_x
        self.log_output(f"Sending {label} from Source to Destination...")

        while self.packet_x < self.host2_x:
            self.packet_x += 10
            self.simulation_canvas.delete("all")
            self.draw_simulation(label)
            time.sleep(0.1)

        self.log_output(f"{label} reached Destination successfully!")
        self.running = False

    def draw_simulation(self, label):
        # Draw hosts
        self.simulation_canvas.create_rectangle(self.host1_x - 20, self.host_y - 20,
                                                self.host1_x + 20, self.host_y + 20, fill="blue")
        self.simulation_canvas.create_rectangle(self.host2_x - 20, self.host_y - 20,
                                                self.host2_x + 20, self.host_y + 20, fill="green")
        self.simulation_canvas.create_text(self.host1_x, self.host_y - 30, text="Source")
        self.simulation_canvas.create_text(self.host2_x, self.host_y - 30, text="Destination")

        # Draw connection line
        self.simulation_canvas.create_line(self.host1_x, self.host_y, 
                                        self.host2_x, self.host_y, 
                                        dash=(4, 2), fill="gray")

        # Draw packet
        self.simulation_canvas.create_oval(self.packet_x - 10, self.host_y - 10,
                                           self.packet_x + 10, self.host_y + 10, fill="red")
        self.simulation_canvas.create_text(self.packet_x, self.host_y - 20, text=label)

    def start_simulation(self):
        technique = self.technique_combo.get()
        data = self.input_entry.get()

        if not technique or not data:
            self.log_output("Please select a technique and enter data.")
            return

        additional_input = self.additional_entry.get() if self.additional_entry.winfo_ismapped() else None

        self.log_output(f"Starting {technique} Simulation...\n")

        threading.Thread(target=self.run_simulation, args=(technique, data, additional_input), daemon=True).start()

    def run_simulation(self, technique, data, additional_input):
        if technique == "Parity Check":
            self.simulate_parity_check(data)
        elif technique == "Checksum":
            self.simulate_checksum(data)
        elif technique == "CRC":
            if not additional_input:
                self.log_output("Please enter a divisor for CRC.")
                return
            self.simulate_crc(data, additional_input)
        elif technique == "Hamming Code":
            self.simulate_hamming_code(data)

    def simulate_parity_check(self, data):
        # Count both zeros and ones
        ones_count = data.count('2')
        zeros_count = data.count('0')
        
        self.log_output(f"Number of '1's: {ones_count}")
        self.log_output(f"Number of '0's: {zeros_count}")
        
        # Only add parity bit if counts are not equal
        if ones_count != zeros_count:
            parity_bit = '0' if ones_count % 2 == 0 else '1'
            updated_data = data + parity_bit
            self.log_output(f"Parity Bit needed: {parity_bit}")
        else:
            updated_data = data
            self.log_output("No parity bit needed - balanced data")

        self.update_table(data, self.data_frame)
        self.update_table(updated_data, self.corrected_frame)
        self.simulate_animation("Packet" + (" with Parity Bit" if ones_count != zeros_count else ""))

    def simulate_checksum(self, data):
        # Show detailed checksum calculation
        chunk_size = 8  # Process 8 bits at a time
        chunks = [data[i:i+chunk_size] for i in range(0, len(data), chunk_size)]
        
        self.log_output("Checksum Calculation:")
        sum_value = 0
        for chunk in chunks:
            chunk_value = int(chunk, 2) if all(bit in '01' for bit in chunk) else sum(ord(ch) for ch in chunk)
            self.log_output(f"Chunk: {chunk} = {chunk_value}")
            sum_value += chunk_value
        
        checksum = format(sum_value, 'b')  # Convert to binary
        self.log_output(f"Final Sum: {sum_value}")
        self.log_output(f"Checksum (binary): {checksum}")

        self.update_table(data, self.data_frame)
        self.update_table(data + checksum, self.corrected_frame)
        self.simulate_animation("Packet with Checksum")

    def simulate_crc(self, data, divisor):
        # Original data
        self.log_output(f"Original Data: {data}")
        
        # Encryption
        dividend = data + "0" * (len(divisor) - 1)
        remainder = list(dividend)
        
        self.log_output(f"Appended Data: {dividend}")
        
        for i in range(len(data)):
            if remainder[i] == '1':
                for j in range(len(divisor)):
                    remainder[i + j] = '0' if remainder[i + j] == divisor[j] else '1'
        
        crc = ''.join(remainder[-(len(divisor) - 1):])
        encrypted_data = data + crc
        self.log_output(f"CRC Value: {crc}")
        self.log_output(f"Encrypted Data: {encrypted_data}")
        
        # Decryption verification
        verification_remainder = list(encrypted_data)
        for i in range(len(data)):
            if verification_remainder[i] == '1':
                for j in range(len(divisor)):
                    verification_remainder[i + j] = '0' if verification_remainder[i + j] == divisor[j] else '1'
        
        final_remainder = ''.join(verification_remainder[-(len(divisor) - 1):])
        is_valid = all(bit == '0' for bit in final_remainder)
        self.log_output(f"Verification Remainder: {final_remainder}")
        self.log_output(f"Data is {'valid' if is_valid else 'corrupted'}")
        
        # Add decrypted data display
        decrypted_data = encrypted_data[:len(data)]  # Extract original data portion
        self.log_output(f"Decrypted Data: {decrypted_data}")
        
        # Update the display tables
        self.update_table(data, self.data_frame)
        self.update_table(encrypted_data, self.corrected_frame, 
                         highlight_index=len(data) if is_valid else None)  # Highlight the CRC portion
        self.simulate_animation("Packet with CRC")

    def simulate_hamming_code(self, data):
        data_bits = list(map(int, data))
        hamming_code = [0, 0, data_bits[0], 0, data_bits[1], data_bits[2], data_bits[3]]

        for p in [1, 2, 4]:
            parity = 0
            for i in range(1, len(hamming_code) + 1):
                if (i & p) == p:
                    parity ^= hamming_code[i - 1]
            hamming_code[p - 1] = parity

        hamming_code_str = ''.join(map(str, hamming_code))
        self.log_output(f"Hamming Code: {hamming_code_str}")

        self.update_table(data, self.data_frame)
        self.update_table(hamming_code_str, self.corrected_frame)
        self.simulate_animation("Packet with Hamming Code")

if __name__ == "__main__":
    root = tk.Tk()
    app = ErrorDetectionSimulation(root)
    root.mainloop()
